{
  "version": 3,
  "sources": ["dist/index.js", "dist/Text.js"],
  "sourcesContent": ["import { Text } from './Text.js';\n// State for this instance\nconst textIds = new Set();\nconst timerIds = new Set();\n// Helper function to generate unique IDs\nfunction generateId() {\n    return 'text_' + Math.random().toString(36).substr(2, 9);\n}\n// Create a new text with random content\nexport function createRandomText() {\n    const randomTexts = [\n        \"Hello from JavaScript! \uD83D\uDC4B\",\n        \"Swift and JavaScript working together \uD83E\uDD1D\",\n        \"Dynamic text creation \uD83D\uDE80\",\n        \"This is pretty cool! \u2728\",\n        \"JavaScript is fun! \uD83C\uDFAE\"\n    ];\n    const randomText = randomTexts[Math.floor(Math.random() * randomTexts.length)];\n    const config = {\n        text: randomText,\n        style: {\n            fontSize: 10,\n            color: '#1e88e5',\n            backgroundColor: '#e3f2fd',\n            padding: 12,\n            cornerRadius: 10,\n            shadowRadius: 4,\n            shadowX: 2,\n            shadowY: 2,\n            shadowColor: '#000000'\n        }\n    };\n    new Text(config, textIds).create();\n}\n// Create a text with a counter\nexport function createCounterText() {\n    let count = 0;\n    const config = {\n        text: `Counter: ${count}`,\n        style: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            color: '#4a148c',\n            backgroundColor: '#f3e5f5',\n            padding: 16,\n            cornerRadius: 12,\n            textAlignment: 'center'\n        }\n    };\n    const builder = new Text(config, textIds).create();\n    const timerId = setInterval(() => {\n        count++;\n        builder.update({ text: `Counter: ${count}` });\n    }, 1000);\n    timerIds.add(timerId);\n}\n// Clear all texts\nexport function clearAllTexts() {\n    // Clear all timers\n    timerIds.forEach(timerId => {\n        clearInterval(timerId);\n    });\n    timerIds.clear();\n    // Remove all texts\n    textIds.forEach(id => {\n        removeSwiftText(id);\n    });\n    textIds.clear();\n}\n// Initialize with some examples\ncreateRandomText();\ncreateCounterText();\ncreateRandomText();\nnew Text({ text: 'Hello from JavaScript!' }, textIds).create();\n", "const defaultStyle = {\n    fontSize: 32,\n    fontWeight: 'regular',\n    color: '#000000',\n    backgroundColor: '#ffffff',\n    padding: 8,\n    cornerRadius: 8,\n    italic: false,\n    underline: false,\n    strikethrough: false,\n    kerning: 0,\n    lineSpacing: 0,\n    textAlignment: 'leading'\n};\n// Text styling API\nexport class Text {\n    constructor(config, textIds) {\n        this.textIds = textIds;\n        this.id = config.id || generateId();\n        this.text = config.text;\n        this.style = {\n            ...defaultStyle,\n            ...config.style || {}\n        };\n    }\n    // Create the text in SwiftUI\n    create() {\n        createSwiftText(this.id, this.text, this.style);\n        this.textIds.add(this.id);\n        return this;\n    }\n    // Update existing text\n    update(config) {\n        if (config.text !== undefined) {\n            this.text = config.text;\n        }\n        if (config.style) {\n            this.style = {\n                ...this.style,\n                ...config.style\n            };\n        }\n        updateSwiftText(this.id, this.text, this.style);\n        return this;\n    }\n    // Get the current ID\n    getId() {\n        return this.id;\n    }\n}\n// Helper function to generate unique IDs\nfunction generateId() {\n    return 'text_' + Math.random().toString(36).substr(2, 9);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,MAAM,eAAe;AAAA,IACjB,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,SAAS;AAAA,IACT,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,eAAe;AAAA,IACf,SAAS;AAAA,IACT,aAAa;AAAA,IACb,eAAe;AAAA,EACnB;AAEO,MAAM,OAAN,MAAW;AAAA,IACd,YAAY,QAAQA,UAAS;AACzB,WAAK,UAAUA;AACf,WAAK,KAAK,OAAO,MAAM,WAAW;AAClC,WAAK,OAAO,OAAO;AACnB,WAAK,QAAQ;AAAA,QACT,GAAG;AAAA,QACH,GAAG,OAAO,SAAS,CAAC;AAAA,MACxB;AAAA,IACJ;AAAA;AAAA,IAEA,SAAS;AACL,sBAAgB,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK;AAC9C,WAAK,QAAQ,IAAI,KAAK,EAAE;AACxB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,OAAO,QAAQ;AACX,UAAI,OAAO,SAAS,QAAW;AAC3B,aAAK,OAAO,OAAO;AAAA,MACvB;AACA,UAAI,OAAO,OAAO;AACd,aAAK,QAAQ;AAAA,UACT,GAAG,KAAK;AAAA,UACR,GAAG,OAAO;AAAA,QACd;AAAA,MACJ;AACA,sBAAgB,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK;AAC9C,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,QAAQ;AACJ,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAEA,WAAS,aAAa;AAClB,WAAO,UAAU,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AAAA,EAC3D;;;ADnDA,MAAM,UAAU,oBAAI,IAAI;AACxB,MAAM,WAAW,oBAAI,IAAI;AAMlB,WAAS,mBAAmB;AAC/B,UAAM,cAAc;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,UAAM,aAAa,YAAY,KAAK,MAAM,KAAK,OAAO,IAAI,YAAY,MAAM,CAAC;AAC7E,UAAM,SAAS;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,QACH,UAAU;AAAA,QACV,OAAO;AAAA,QACP,iBAAiB;AAAA,QACjB,SAAS;AAAA,QACT,cAAc;AAAA,QACd,cAAc;AAAA,QACd,SAAS;AAAA,QACT,SAAS;AAAA,QACT,aAAa;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,KAAK,QAAQ,OAAO,EAAE,OAAO;AAAA,EACrC;AAEO,WAAS,oBAAoB;AAChC,QAAI,QAAQ;AACZ,UAAM,SAAS;AAAA,MACX,MAAM,YAAY,KAAK;AAAA,MACvB,OAAO;AAAA,QACH,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,iBAAiB;AAAA,QACjB,SAAS;AAAA,QACT,cAAc;AAAA,QACd,eAAe;AAAA,MACnB;AAAA,IACJ;AACA,UAAM,UAAU,IAAI,KAAK,QAAQ,OAAO,EAAE,OAAO;AACjD,UAAM,UAAU,YAAY,MAAM;AAC9B;AACA,cAAQ,OAAO,EAAE,MAAM,YAAY,KAAK,GAAG,CAAC;AAAA,IAChD,GAAG,GAAI;AACP,aAAS,IAAI,OAAO;AAAA,EACxB;AAEO,WAAS,gBAAgB;AAE5B,aAAS,QAAQ,aAAW;AACxB,oBAAc,OAAO;AAAA,IACzB,CAAC;AACD,aAAS,MAAM;AAEf,YAAQ,QAAQ,QAAM;AAClB,sBAAgB,EAAE;AAAA,IACtB,CAAC;AACD,YAAQ,MAAM;AAAA,EAClB;AAEA,mBAAiB;AACjB,oBAAkB;AAClB,mBAAiB;AACjB,MAAI,KAAK,EAAE,MAAM,yBAAyB,GAAG,OAAO,EAAE,OAAO;",
  "names": ["textIds"]
}
