{
  "version": 3,
  "sources": ["dist/index.js", "dist/TextBuilder.js"],
  "sourcesContent": ["import { TextBuilder } from './TextBuilder.js';\n// State for this instance\nconst textIds = new Set();\nconst timerIds = new Set();\n// Helper function to generate unique IDs\nfunction generateId() {\n    return 'text_' + Math.random().toString(36).substr(2, 9);\n}\n// Create a new text with builder pattern\nfunction text(content) {\n    return new TextBuilder(generateId(), content, textIds);\n}\n// Create a new text with random content\nexport function createRandomText() {\n    const randomTexts = [\n        \"Hello from JavaScript! \uD83D\uDC4B\",\n        \"Swift and JavaScript working together \uD83E\uDD1D\",\n        \"Dynamic text creation \uD83D\uDE80\",\n        \"This is pretty cool! \u2728\",\n        \"JavaScript is fun! \uD83C\uDFAE\"\n    ];\n    const randomText = randomTexts[Math.floor(Math.random() * randomTexts.length)];\n    text(randomText)\n        .fontSize(10)\n        .color('#1e88e5')\n        .backgroundColor('#e3f2fd')\n        .padding(12)\n        .cornerRadius(10)\n        .shadow(4, 2, 2, '#000000')\n        .create();\n}\n// Create a text with a counter\nexport function createCounterText() {\n    const id = generateId();\n    let count = 0;\n    const builder = text(`Counter: ${count}`)\n        .fontSize(24)\n        .fontWeight('bold')\n        .color('#4a148c')\n        .backgroundColor('#f3e5f5')\n        .padding(16)\n        .cornerRadius(12)\n        .align('center')\n        .create();\n    const timerId = setInterval(() => {\n        count++;\n        builder.update(`Counter: ${count}`);\n    }, 1000);\n    timerIds.add(timerId);\n}\n// Clear all texts\nexport function clearAllTexts() {\n    // Clear all timers\n    timerIds.forEach(timerId => {\n        clearInterval(timerId);\n    });\n    timerIds.clear();\n    // Remove all texts\n    textIds.forEach(id => {\n        removeSwiftText(id);\n    });\n    textIds.clear();\n}\n// Initialize with some examples\ncreateRandomText();\ncreateCounterText();\ncreateRandomText();\n", "// Text styling API\nexport class TextBuilder {\n    constructor(id, text, textIds) {\n        this.textIds = textIds;\n        this.id = id;\n        this.text = text;\n        this.style = {\n            fontSize: 32,\n            fontWeight: 'regular',\n            color: '#000000',\n            backgroundColor: 'clear',\n            padding: 8,\n            cornerRadius: 8,\n            italic: false,\n            underline: false,\n            strikethrough: false,\n            kerning: 0,\n            lineSpacing: 0,\n            textAlignment: 'leading'\n        };\n    }\n    // Font styling\n    fontSize(size) {\n        this.style.fontSize = size;\n        return this;\n    }\n    fontWeight(weight) {\n        this.style.fontWeight = weight;\n        return this;\n    }\n    // Colors\n    color(hex) {\n        this.style.color = hex;\n        return this;\n    }\n    backgroundColor(hex) {\n        this.style.backgroundColor = hex;\n        return this;\n    }\n    // Layout\n    padding(value) {\n        this.style.padding = value;\n        return this;\n    }\n    cornerRadius(value) {\n        this.style.cornerRadius = value;\n        return this;\n    }\n    // Text style\n    italic() {\n        this.style.italic = true;\n        return this;\n    }\n    underline() {\n        this.style.underline = true;\n        return this;\n    }\n    strikethrough() {\n        this.style.strikethrough = true;\n        return this;\n    }\n    kerning(value) {\n        this.style.kerning = value;\n        return this;\n    }\n    lineSpacing(value) {\n        this.style.lineSpacing = value;\n        return this;\n    }\n    align(alignment) {\n        this.style.textAlignment = alignment;\n        return this;\n    }\n    // Shadow\n    shadow(radius, x = 0, y = 0, color = '#000000') {\n        this.style.shadowRadius = radius;\n        this.style.shadowX = x;\n        this.style.shadowY = y;\n        this.style.shadowColor = color;\n        return this;\n    }\n    // Create the text in SwiftUI\n    create() {\n        createSwiftText(this.id, this.text, this.style);\n        this.textIds.add(this.id);\n        return this;\n    }\n    // Update existing text\n    update(newText = null) {\n        updateSwiftText(this.id, newText || this.text, this.style);\n        return this;\n    }\n}\n"],
  "mappings": "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",
  "names": ["text", "textIds"]
}
